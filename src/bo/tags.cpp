/** @file */

#include "bo/tags.h"

namespace rip {
namespace tags {

std::string get_string(int i) {
  switch (i)
  {
    case SOLUTION_ADMISSIBLE: 
      return "SOLUTION_ADMISSIBLE";
    case SHIFT_ADMISSIBLE: 
      return "SHIFT_ADMISSIBLE";
    case OPERATION_ADMISSIBLE: 
      return "OPERATION_ADMISSIBLE";
    case DRI01_INTER_SHIFTS_DURATION:
      return "DRI01_INTER_SHIFTS_DURATION" ;
    case DRI03_RESPECT_OF_MAXIMAL_DRIVING_TIME:
      return "DRI03_RESPECT_OF_MAXIMAL_DRIVING_TIME" ;
    case DRI08_TIME_WINDOWS_OF_THE_DRIVERS:
      return "DRI08_TIME_WINDOWS_OF_THE_DRIVERS" ;
    case TL01_DIFFERENT_SHIFTS_OF_THE_SAME_TRAILER_CANNOT_OVERLAP_IN_TIME:
      return "TL01_DIFFERENT_SHIFTS_OF_THE_SAME_TRAILER_CANNOT_OVERLAP_IN_TIME" ;
    case TL03_THE_TRAILER_ATTACHED_TO_A_DRIVER_IN_A_SHIFT_MUST_BE_COMPATIBLE:
      return "TL03_THE_TRAILER_ATTACHED_TO_A_DRIVER_IN_A_SHIFT_MUST_BE_COMPATIBLE" ;
    case DYN01_RESPECT_OF_TANK_CAPACITY_FOR_EACH_SITE:
      return "DYN01_RESPECT_OF_TANK_CAPACITY_FOR_EACH_SITE" ;
    case SHI02_ARRIVAL_AT_A_POINT_REQUIRES_TRAVELING_TIME_FROM_PREVIOUS_POINT:
      return "SHI02_ARRIVAL_AT_A_POINT_REQUIRES_TRAVELING_TIME_FROM_PREVIOUS_POINT" ;
    case SHI03_LOADING_AND_DELIVERY_OPERATIONS_TAKE_A_CONSTANT_TIME:
      return "SHI03_LOADING_AND_DELIVERY_OPERATIONS_TAKE_A_CONSTANT_TIME" ;
    case SHI05_DELIVERY_OPERATIONS_REQUIRE_THE_CUSTOMER_SITE_TO_BE_ACCESSIBLE_FOR_THE_TRAILER:
      return "SHI05_DELIVERY_OPERATIONS_REQUIRE_THE_CUSTOMER_SITE_TO_BE_ACCESSIBLE_FOR_THE_TRAILER" ;
    case SHI06_TRAILERQUANTITY_CANNOT_BE_NEGATIVE_OR_EXCEED_CAPACITY_OF_THE_TRAILER:
      return "SHI06_TRAILERQUANTITY_CANNOT_BE_NEGATIVE_OR_EXCEED_CAPACITY_OF_THE_TRAILER" ;
    case SHI07_INITIAL_QUANTITY_OF_A_TRAILER_FOR_A_SHIFT_IS_THE_END_QUANTITY_OF_THE_TRAILER_FOLLOWING_THE_PREVIOUS_SHIFT:
      return "SHI07_INITIAL_QUANTITY_OF_A_TRAILER_FOR_A_SHIFT_IS_THE_END_QUANTITY_OF_THE_TRAILER_FOLLOWING_THE_PREVIOUS_SHIFT" ;
    case SHI11_SOME_PRODUCT_MUST_BE_LOADED_OR_DELIVERED:
      return "SHI11_SOME_PRODUCT_MUST_BE_LOADED_OR_DELIVERED" ;
    case QS02_RUN_OUT_AVOIDANCE:
      return "QS02_RUN_OUT_AVOIDANCE";

    // Additional information macro
    case ERROR_NOT_ADMISSIBLE:
      return "ERROR_NOT_ADMISSIBLE";
    case TODO_MACRO:
      return "TODO_MACRO";
  }
  return "NOT DEFINED";
}

} // namespace tags
} // namespace rip